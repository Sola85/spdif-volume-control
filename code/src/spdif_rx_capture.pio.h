// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ---------------- //
// spdif_rx_capture //
// ---------------- //

#define spdif_rx_capture_wrap_target 6
#define spdif_rx_capture_wrap 6

#define spdif_rx_capture_offset_entry_point 0u

static const uint16_t spdif_rx_capture_program_instructions[] = {
    0xe03f, //  0: set    x, 31                      
    0x2020, //  1: wait   0 pin, 0                   
    0x20a0, //  2: wait   1 pin, 0                   
    0x0041, //  3: jmp    x--, 1                     
    0x2020, //  4: wait   0 pin, 0                   
    0x20a0, //  5: wait   1 pin, 0                   
            //     .wrap_target
    0x4001, //  6: in     pins, 1                    
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program spdif_rx_capture_program = {
    .instructions = spdif_rx_capture_program_instructions,
    .length = 7,
    .origin = -1,
};

static inline pio_sm_config spdif_rx_capture_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + spdif_rx_capture_wrap_target, offset + spdif_rx_capture_wrap);
    return c;
}

static inline void spdif_rx_capture_program_init(PIO pio, uint sm, uint offset, uint entry_point, pio_sm_config (*get_default_config)(uint), uint pin)
{
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, false);
    pio_gpio_init(pio, pin);
    gpio_pull_down(pin);
    gpio_set_inover(pin, GPIO_OVERRIDE_NORMAL);
    pio_sm_config sm_config = (*get_default_config)(offset);
    sm_config_set_clkdiv(&sm_config, 1);
    sm_config_set_jmp_pin(&sm_config, pin);
    sm_config_set_in_pins(&sm_config, pin); // PINCTRL_IN_BASE for wait
    sm_config_set_in_shift(&sm_config, false, true, 32); // shift_left, autopush, 32bit
    sm_config_set_fifo_join(&sm_config, PIO_FIFO_JOIN_RX);
    pio_sm_init(pio, sm, offset, &sm_config);
    pio_sm_set_pins(pio, sm, 0); // clear pins
    pio_sm_clear_fifos(pio, sm);
    pio_sm_drain_tx_fifo(pio, sm);
    pio_sm_set_enabled(pio, sm, true);
    pio_sm_exec(pio, sm, pio_encode_jmp(offset + entry_point));
}

#endif
